disconnect_button = tk.Button(root, text="Disconnect", command=disconnect_action, bg="#FF5733", fg="white", font=("Helvetica", 14))
disconnect_button.pack_forget()

spaces2 = tk.Button(root, bg="#313335", border=0, state="disabled")
spaces2.pack_forget()

# Create buttons for saving session and loading last session
save_session_button = tk.Button(root, text="Save Session", command=save_session, bg="#7345e5", fg="white", font=("Helvetica", 14))
save_session_button.pack(pady=10)

spaces3 = tk.Button(root, bg="#313335", border=0, state="disabled")
spaces3.pack_forget()

load_session_button = tk.Button(root, text="Last Session Login", command=load_last_session, bg="#FF5733", fg="white", font=("Helvetica", 14))
load_session_button.pack(pady=10)

And

def setup_connection():
    try:
        # Get user input from the entry widgets
        server_ip = ip_entry.get()
        server_port = port_entry.get()
        password = password_entry.get()

        # Hide the server setup widgets
        ip_label.pack_forget()
        spacesl1.pack_forget()

        ip_entry.pack_forget()
        spacese1.pack_forget()

        port_label.pack_forget()
        spacesl2.pack_forget()

        port_entry.pack_forget()
        spacese2.pack_forget()

        password_label.pack_forget()
        spacesl3.pack_forget()

        password_entry.pack_forget()
        spacese3.pack_forget()

        spaces.pack_forget()
        connect_button.pack_forget()

        spaces2.pack_forget()
        save_session_button.pack_forget()

        spaces3.pack_forget()
        load_session_button.pack_forget()

        # Show the command entry, send button, and console label
        spaccing.pack()
        info_lable1.pack()
        command_entry.pack()
        spaccing5.pack()
        send_button.pack()
        spaccing2.pack()
        info_lable2.pack()
        grant_user_text.pack()
        grant_user.pack()
        spaccing4.pack()
        op_grant.pack()
        spaccing3.pack()
        deop_grant.pack()
        console_label.pack()

        # Store the server details for command execution
        root.server_ip = server_ip
        root.server_port = server_port
        root.password = password
        disconnect_button.pack()
    except Exception as e:
        console_label.config(text=f"Error setting up connection: {e}")

And

def disconnect_action():
    # Hide the command entry, send button, and console label
    spaccing2.pack_forget()
    info_lable1.pack_forget()
    info_lable2.pack_forget()
    spaccing.pack_forget()
    command_entry.pack_forget()
    spaccing5.pack_forget()
    send_button.pack_forget()
    grant_user_text.pack_forget()
    spaccing4.pack_forget()
    grant_user.pack_forget()
    op_grant.pack_forget()
    spaccing3.pack_forget()
    deop_grant.pack_forget()
    console_label.pack_forget()
    disconnect_button.pack_forget()

    # Show the server setup widgets
    ip_label.pack()
    spacesl1.pack()

    ip_entry.pack()
    spacese1.pack()

    port_label.pack()
    spacesl2.pack()

    port_entry.pack()
    spacese2.pack()

    password_label.pack()
    spacesl3.pack()

    password_entry.pack()

    spaces.pack()
    connect_button.pack()
    spaces2.pack()
    save_session_button.pack()
    spaces3.pack()
    load_session_button.pack()

And

def save_session():
    # Save current session data to session.json
    session_data["server_ip"] = ip_entry.get()
    session_data["server_port"] = port_entry.get()
    session_data["password"] = password_entry.get()
    with open(session_file_path, "w") as session_file:
        json.dump(session_data, session_file)

def load_last_session():
    # Populate input fields with last session data
    ip_entry.delete(0, tk.END)
    ip_entry.insert(0, session_data["server_ip"])
    port_entry.delete(0, tk.END)
    port_entry.insert(0, session_data["server_port"])
    password_entry.delete(0, tk.END)
    password_entry.insert(0, session_data["password"])

And

# Get the user's Documents folder path
documents_path = os.path.join(os.environ["USERPROFILE"], "Documents")

# Construct the full path to the session.json file
session_file_path = os.path.join(documents_path, "session.json")

# Load session data from session.json (if available)
try:
    with open(session_file_path, "r") as session_file:
        session_data = json.load(session_file)
except FileNotFoundError:
    session_data = {"server_ip": "", "server_port": "", "password": ""}
